# Binary Search
Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. 
If target exists, then return its index. Otherwise, return -1.
You must write an algorithm with O(log n) runtime complexity.

short definition about

Binary search is a textbook algorithm based on the idea to compare the target value to the middle element of the array.
If the target value is equal to the middle element - we're done.
If the target value is smaller - continue to search on the left.
If the target value is larger - continue to search on the right.

Algorithm
Initialise left and right pointers : left = 0, right = n - 1.

While left <= right :

Compare middle element of the array nums[pivot] to the target value target.

If the middle element is the target target = nums[pivot] : return pivot.

If the target is not yet found :

If target < nums[pivot], continue the search on the left right = pivot - 1.

Else continue the search on the right left = pivot + 1.

CODE IN JAVA
class Solution {
  public int search(int[] nums, int target) {
    int pivot, left = 0, right = nums.length - 1;
    while (left <= right) {
      pivot = left + (right - left) / 2;
      if (nums[pivot] == target) return pivot;
      if (target < nums[pivot]) right = pivot - 1;
      else left = pivot + 1;
    }
    return -1;
  }
}


